package com.wipro.fooddeliveryapp.order.services;

import java.awt.Menu;
import java.util.List;

import org.springframework.stereotype.Service;

import com.wipro.fooddeliveryapp.order.entitys.Order;
import com.wipro.fooddeliveryapp.order.repositoryy.OrderRepository;

import com.wipro.fooddeliveryapp.Restuarant.feign.RestaurantClient;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class OrderServiceImpl implements OrderService {

    private final OrderRepository orderRepository;
    private final MenuClient menuClient;  // Feign client for MenuService
    private final RestaurantClient restaurantClient;  // Feign client for RestaurantService

    @Override
    public Order placeOrder(Order order) {
        // Verify if the restaurant exists
        RestaurantDTO restaurant = restaurantClient.getRestaurantById(order.getRestaurantId());
        if (restaurant == null) {
            throw new RuntimeException("Restaurant not found");
        }

        // Verify if the menu items exist
        List<Menu> menus = menuClient.getMenusByIds(order.getMenuItemIds());
        if (menus.isEmpty()) {
            throw new RuntimeException("Menu items not found");
        }

        // Calculate total amount
        double totalAmount = menus.stream()
                .mapToDouble(Menu::getPrice)
                .sum();
        order.setTotalAmount(totalAmount);

        // Set initial status as "Pending"
        order.setOrderStatus("Pending");

        return orderRepository.save(order);
    }

    @Override
    public List<Order> getAllOrders() {
        return orderRepository.findAll();
    }

    @Override
    public Order getOrderById(Long id) {
        return orderRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Order not found with ID: " + id));
    }

    @Override
    public Order updateOrderStatus(Long id, String status) {
        Order existingOrder = getOrderById(id);
        existingOrder.setOrderStatus(status);
        return orderRepository.save(existingOrder);
    }

    @Override
    public void deleteOrder(Long id) {
        orderRepository.deleteById(id);
    }
}
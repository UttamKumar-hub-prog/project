package com.wipro.fooddeliveryapp.restuarant.servicess;

import java.util.List;

import org.springframework.stereotype.Service;

import com.wipro.fooddeliveryapp.restuarant.entitys.Restuarant;
import com.wipro.fooddeliveryapp.restuarant.repositorys.RestuarantRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@RequiredArgsConstructor
public class RestuarantServiceImpl implements RestuarantService {

	private final RestuarantRepository restuarantRepository;

	@Override
	public Restuarant saveData(Restuarant restuarant) {

		return restuarantRepository.save(restuarant);
	}

	public List<Restuarant> getAll() {
		return restuarantRepository.findAll();
	}

	public Restuarant getRestaurantById(Long id) {
		return restuarantRepository.findById(id)
				.orElseThrow(() -> new RuntimeException("Restaurant not found with ID: " + id));
	}

	public Restuarant updateRestaurantFull(Long id, Restuarant updatedRestaurant) {
        Restuarant existing = getRestaurantById(id);

        existing.setRname(updatedRestaurant.getRname());
        existing.setRaddress(updatedRestaurant.getRaddress());
        existing.setType(updatedRestaurant.getType());

        return restuarantRepository.save(existing);
    }

    // Partial update (PATCH)
    public Restuarant updateRestaurantPartial(Long id, Restuarant updatedRestaurant) {
        Restuarant existing = getRestaurantById(id);

        if (updatedRestaurant.getRname() != null) {
            existing.setRname(updatedRestaurant.getRname());
        }
        if (updatedRestaurant.getRaddress() != null) {
            existing.setRaddress(updatedRestaurant.getRaddress());
        }
        if (updatedRestaurant.getType() != null) {
            existing.setType(updatedRestaurant.getType());
        }

        return restuarantRepository.save(existing);
    }

	public void deleteRestaurant(Long id) {
		restuarantRepository.deleteById(id);
	}

}























//	
//	public List<Menus> getMenusByRestaurantId(Long restaurantId) {
//		Restuarant restaurant = restuarantRepository.findById(restaurantId)
//				.orElseThrow(() -> new RuntimeException("Restaurant not found"));
//		return restaurant.getMenus(); // directly using the entity relationship
//	}
//
//	public List<Menus> getSelectedMenus(Long restaurantId, List<String> itemNames) {
//		Restuarant restaurant = restuarantRepository.findById(restaurantId)
//				.orElseThrow(() -> new RuntimeException("Restaurant not found"));
//
//		List<Menus> selectedMenus = new ArrayList<>();
//		for (Menus menu : restaurant.getMenus()) {
//			if (itemNames.contains(menu.getItemname())) {
//				selectedMenus.add(menu);
//			}
//		}
//		return selectedMenus;
//	}
//}
//
//
//
//
//
//
//restuarant.getMenus().forEach(menu -> menu.setRestuarant(restuarant));